Ex.1
#Даны значения величины заработной платы заемщиков банка (zp) и значения их поведенческого кредитного скоринга (ks):
#zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110],
#ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832].
#Найдите ковариацию этих двух величин с помощью элементарных действий, а затем с помощью функции cov из numpy
#Полученные значения должны быть равны. Найдите коэффициент корреляции Пирсона с помощью ковариации и 
#среднеквадратичных отклонений двух признаков, 
#а затем с использованием функций из библиотек numpy и pandas.

import numpy as np
import scipy.stats as stats 
import matplotlib.pyplot as plt
import pandas as pd


zp = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
ks = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])

df = pd.DataFrame({'zpp': [35, 45, 190, 200, 40, 70, 54, 150, 120, 110],
'ksp': [401, 574, 874, 919, 459, 739, 653, 902, 746, 832]})

print(f"cov: {df['zpp']. corr(df['ksp'])}") 

print(np.cov(zp, ks, ddof=1))
print(f"std zp: {np.std(zp, ddof=1)}")
print(f"std ks: {np.std(ks, ddof=1)}")

cov = np.mean(zp * ks) - np.mean(zp) * np.mean(ks)
print(f"cov: {cov}")

corrcoef = 10175.37777778 / (62.31318747531162 * 183.99544076477068)
print(f"corrcoef: {corrcoef:.8f}")

r = np.corrcoef(zp, ks)
print(f"r: {r}")

print(stats.spearmanr(zp, ks))

plt.scatter(zp, ks)
plt.title(f"r = {round(r[0][1], 3)}")
plt.xlabel('x')
plt.ylabel('y')
plt.show()

# График показывает, что есть прямая линейная взаимосвязь двух показателей,
# зависимость очень сильная - 0.9757. С увеличением зарплаты
# растет значение поведенческого кредитного скоринга, чем выше бал, тем больше вероятность
# одобрения заявки. Скоринговый балл – это показатель платежеспособности заемщика.

Ex.2

#Измерены значения IQ выборки студентов,
#обучающихся в местных технических вузах:
#131, 125, 115, 122, 131, 115, 107, 99, 125, 111.
#Известно, что в генеральной совокупности IQ распределен нормально.
#Найдите доверительный интервал для математического ожидания с надежностью 0.95.'''

import numpy as np
import scipy.stats as st
iq = np.array([131, 125, 115, 122, 131, 115, 107, 99, 125, 111])

alpha = 0.05
n = len(iq)
mean = iq.mean()
print(f"mean: {mean}")

sigma = iq.std(ddof=1)
print(f"sigma: {sigma}")

t = st.t.ppf(alpha / 2, df = n - 1)
print(f"critical t: {t}")

x1 = mean + t * sigma / np.sqrt(n)
x2 = mean - t * sigma / np.sqrt(n)
print(f"range: {x1} : {x2}")


#Доверительный интервал от 110.55 - 125.64 с 0.95 долей вероятности захватывает математическое ожидание


Ex.3
#Известно, что рост футболистов в сборной распределен нормально с дисперсией генеральной 
#совокупности, равной 25 кв.см. Объем выборки равен 27, среднее выборочное составляет 174.2. 
#Найдите доверительный интервал для математического ожидания с надежностью 0.95.'''

import numpy as np
import scipy.stats as st

sigma = np.sqrt(25)
n = 27
mean = 174.2
alpha = 0.05
z1 = st.norm.ppf(alpha / 2)
z2 = st.norm.ppf(1 - alpha / 2)
print(z1, z2)
x1 = mean + z1 * sigma / np.sqrt(n)
x2 = mean - z1 * sigma / np.sqrt(n)
print(f"range: {x1} : {x2}")

#Доверительный интервал от 172.31 - 176.08 с 0.95 долей вероятности захватывает математическое ожидание 
