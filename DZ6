Ex.1 #Известно, что генеральная совокупность распределена нормально со средним квадратическим отклонением, равным 16.
Найти доверительный интервал для оценки математического ожидания a с надежностью 0.95, если выборочная средняя 
M = 80, а объем выборки n = 256.'''

import numpy as np
from scipy import stats


n = 256
m = 80
alpha = 0.05  #1 - 0.95
sigma = 16
z = stats.norm.ppf(alpha / 2)
print(f"critical z: {z}")

x1 = m + z * sigma / np.sqrt(n)
x2 = m - z * sigma / np.sqrt(n)
print(f"range: {x1} : {x2}")

#Доверительный интервал от 78.04 - 81.96 с 0.95 долей вероятности 
захватывает математическое ожидание 

Ex.2 #В результате 10 независимых измерений некоторой величины X, выполненных с одинаковой точностью, 
получены опытные данные: 6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1
Предполагая, что результаты измерений подчинены нормальному закону распределения вероятностей, 
оценить истинное значение величины X при помощи доверительного интервала, покрывающего это значение 
с доверительной вероятностью 0,95.'''


import numpy as np
from scipy import stats


x = np.array([6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1])
alpha = 0.05
n = len(x)
x_mean = x.mean()
print(f"mean: {x_mean}")

sigma = x.std(ddof=1)
print(f"sigma: {sigma}")

t = stats.t.ppf(alpha / 2, df = n - 1)
print(f"critical t: {t}")

x1 = x_mean + t * sigma / np.sqrt(n)
x2 = x_mean - t * sigma / np.sqrt(n)
print(f"range: {x1} : {x2}")


#Доверительный интервал от 6.26 - 6.91 с 0.95 долей вероятности 
захватывает математическое ожидание 

Ex.3 #Рост дочерей 175, 167, 154, 174, 178, 148, 160, 167, 169, 170
Рост матерей  178, 165, 165, 173, 168, 155, 160, 164, 178, 175
Используя эти данные построить 95% доверительный интервал для разности среднего роста родителей и детей.'''

import numpy as np
from scipy import stats


a = np.array([175, 167, 154, 174, 178, 148, 160, 167, 169, 170])
b = np.array([178, 165, 165, 173, 168, 155, 160, 164, 178, 175])
alpha = 0.05

a_mean = a.mean()
b_mean = b.mean()
print(f"daughters: {a_mean}, mothers: {b_mean}")

ab_len = len(a)

a_sigma = a.std(ddof=1)
b_sigma = b.std(ddof=1)
average_sigma = (a_sigma + b_sigma) / 2
print(f"sigma a: {a_sigma}, b: {b_sigma}")
print(f"average sigma: {average_sigma}")


se = np.sqrt(np.std(a, ddof=1)**2 / len(a) + np.std(b, ddof=1)**2 / len(b))
print(f"se {se}")

t = stats.t.ppf(1 - alpha / 2, df = 2 * (ab_len - 1))
print(f"critical t: {t}")

delta = b_mean - a_mean  
print(f"delta: {delta}")

ds1 = delta - t * se
ds = delta + t * se
print(ds1, ds) 

#Доверительный интервал от -6.26 - 10.06 с 0.95 долей вероятности
 захватывает математическое ожидание 
